@page "/superheros"
@inject ISuperHeroService superHeroService
@inject NavigationManager navigationManager
@implements IDisposable
@inject IJSRuntime JSRuntime

<h3>Ma nouvelle page SuperHeros</h3>

@if (superHeroService.Heroes.Count == 0)
{
    <span>Loading Super Heros...</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Hero Name</th>
                <th>Comic</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hero in superHeroService.Heroes)
            {
                <tr>
                    <td>@hero.Id</td>
                    <td>@hero.FirstName</td>
                    <td>@hero.LastName</td>
                    <td>@hero.HeroName</td>
                    <td>@hero.Comic.Name</td>
                    <td>
                        <button class="btn btn-info" @onclick="()=>ShowHero(hero.Id)">Show</button>
                    </td>
                    <td>
                        <button class="btn btn-outline-warning" @onclick="()=>EditHero(hero.Id)">Edit</button>
                    </td>
                    <td>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="()=>DeleteHero(hero.Id)">Delete</MudButton>
                       @* <MudChip>@state</MudChip>*@
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @*<EditSuperHero Id=heros.Count></EditSuperHero>*@
    <EditSuperHero Hero="HeroToEdit"></EditSuperHero>
}


@code {
    [Inject] private IDialogService DialogService { get; set; }

    string state = "Message box hasn't been opened yet";

    SuperHeroDB.Shared.SuperHero HeroToEdit = new SuperHeroDB.Shared.SuperHero();
    SuperHeroDB.Shared.SuperHero HVide = new SuperHeroDB.Shared.SuperHero();
    List<SuperHero> LHVide = new List<SuperHero> { new SuperHero() };
    //List<SuperHeroDB.Shared.SuperHero> heros = new List<SuperHeroDB.Shared.SuperHero>();
    protected override async Task OnInitializedAsync()
    {
        _ = await superHeroService.GetSuperHeros();
        superHeroService.OnChange += StateHasChanged;
    }

    async void EditHero(int id)
    {
        HeroToEdit = superHeroService.Heroes.FirstOrDefault(h => h.Id == id);

        await JSRuntime.InvokeVoidAsync("console.log", HeroToEdit);
    }
    async void DeleteHero(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");
        state = result == null ? "Cancelled" : "Deleted!";

        if(superHeroService.Heroes.Count>1)
            _ = await superHeroService.DeleteSuperHero(id);
    }

    public void Dispose()
    {
        superHeroService.OnChange -= StateHasChanged;
    }

    void ShowHero(int id)
    {
        navigationManager.NavigateTo($"/superhero/{id}");
    }

    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();
    }
}
